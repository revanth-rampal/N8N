{
  "name": "TeleMeetGenerator",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "a8c5b57b-f72c-4cfa-b8f6-75c99a0b5912",
      "name": "Telegram Trigger",
      "webhookId": "1fe68445-394e-4c26-b7b2-99a9456a4866",
      "credentials": {
        "telegramApi": {
          "id": "KbhXyO4cqCl6k99i",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyAwFFQUPFXphqeH7WaHZvUIjHcAmISFye0",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Your task is to act as a scheduling assistant. From the text below, extract the event title, a valid ISO 8601 start time, and a valid ISO 8601 end time. Also, extract a list of all attendee emails.\\n\\n- Assume the end time is 1 hour after the start time if no duration is specified.\\n- The current date is {{new Date().toISOString()}}.\\n- Respond with ONLY a raw JSON object with the keys: \\\"title\\\", \\\"startTime\\\", \\\"endTime\\\", and \\\"attendees\\\".\\n\\nText: \\\"{{ $('Telegram Trigger').item.json.message.text.replace(/\"/g, '\\\\\\\"') }}\\\"\"\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        0
      ],
      "id": "af520310-d24f-43ab-8392-ac11472e301f",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// This code takes the raw text from Gemini and parses it into clean JSON\nconst rawResponse = $('HTTP Request').item.json.candidates[0].content.parts[0].text;\nconst jsonMatch = rawResponse.match(/\\{[\\s\\S]*\\}/);\nif (!jsonMatch) {\n  throw new Error(\"Could not find a valid JSON object in the response from Gemini.\");\n}\nreturn JSON.parse(jsonMatch[0]);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "302c9dc1-5324-4a07-9105-7677269ec7e8",
      "name": "Code"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "classroom100689792819379369194@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "revanth a"
        },
        "start": "={{ $('Code').item.json.startTime }}",
        "end": "={{ $('Code').item.json.endTime }}",
        "additionalFields": {
          "attendees": [
            "={{ $('Code').item.json.attendees.join(',') }}"
          ],
          "conferenceDataUi": {
            "conferenceDataValues": {
              "conferenceSolution": "hangoutsMeet"
            }
          },
          "summary": "={{ $('Code').item.json.title }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        624,
        0
      ],
      "id": "f1e7f415-3ec5-43db-a505-7cdf90ef0c99",
      "name": "Create an event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "wR7YPlc4hHjSKXRn",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.attendeeEmail }}",
        "subject": "=Meeting Scheduled: {{ $json.summary }}",
        "message": "=<p>Hi there,</p>\n<p>This is a confirmation that the following meeting has been scheduled:</p>\n<p><b>Event:</b> {{ $json.summary }}</p>\n<p><b>Time:</b> {{ new Date($json.startTime).toLocaleString() }}</p>\n<p><b>Join here:</b> <a href=\"{{ $json.hangoutLink }}\">Google Meet Link</a></p>\n<p>See you there!</p>",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1072,
        0
      ],
      "id": "6056cb0d-5250-4351-a2b6-12a181f28cee",
      "name": "Send a message",
      "webhookId": "c7078f09-3502-43fc-a705-084ae9672be9",
      "credentials": {
        "gmailOAuth2": {
          "id": "3sT8kUL57ktOfzHG",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=âœ… Success! Your event \"{{ $('Code').item.json.title }}\" has been scheduled and all attendees have been notified.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1280,
        0
      ],
      "id": "6c643013-8993-469c-b94f-3da8195a41b9",
      "name": "Send a text message",
      "webhookId": "83aaf0f8-fdd9-451d-a0c1-a4ba340434bb",
      "credentials": {
        "telegramApi": {
          "id": "KbhXyO4cqCl6k99i",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the single item from the \"Create an event\" node\nconst eventDetails = $('Create an event').item.json;\n\n// Get the list of attendees from that item\nconst attendeesList = eventDetails.attendees;\n\n// This will create a new list of items, one for each attendee.\n// Each new item will contain the main event details plus that one person's email.\nreturn attendeesList.map(attendee => {\n  return {\n    json: {\n      summary: eventDetails.summary,\n      startTime: eventDetails.start.dateTime,\n      hangoutLink: eventDetails.hangoutLink,\n      attendeeEmail: attendee.email\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        0
      ],
      "id": "569407ca-179b-446e-81de-47f38e9f8e3b",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Create an event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create an event": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "87968cda-ae8f-4d08-932d-79792ad96230",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "829c84efd6a1acde35cad3cfe1982ace0fb406d65cac2d56031c74d97bd2f499"
  },
  "id": "oWmMH6si2XYMocVO",
  "tags": []
}