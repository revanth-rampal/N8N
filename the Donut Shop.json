{
  "name": "the Donut Shop",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "6c1c5e63-bca3-4ad3-a517-1db753063904",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -672,
        -128
      ],
      "id": "99a88bf4-42ba-4652-b26b-0ab4e4eef45b",
      "name": "Webhook",
      "webhookId": "6c1c5e63-bca3-4ad3-a517-1db753063904"
    },
    {
      "parameters": {
        "jsCode": "const webhookData = items[0].json.body;\n\n// Check if items array exists and is not empty\nif (webhookData.items && webhookData.items.length > 0) {\n    const formattedItems = webhookData.items.map(item => {\n        // Calculate the total price for a single item (quantity * price)\n        const itemTotalPrice = (item.quantity * item.price).toFixed(2);\n        \n        // Return a human-readable string for each item\n        return `${item.name} (${item.quantity}) - $${item.price.toFixed(2)} each - Total: $${itemTotalPrice}`;\n    }).join(', '); // Join all item strings with a comma and space\n\n    // Add the formatted string back to the webhook data\n    webhookData.formattedItems = formattedItems;\n} else {\n    // Handle the case where there are no items\n    webhookData.formattedItems = \"No items ordered.\";\n}\n\n// Return the modified data for the next node in the workflow\nreturn [{ json: webhookData }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        -128
      ],
      "id": "0daccc63-7373-4b0c-b95b-ea122676961f",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1_lGT0wWxx_nGNh_hSto4tSjDOkzPEmvSHYDR6JV1pYE",
          "mode": "list",
          "cachedResultName": "The Donut Shop",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_lGT0wWxx_nGNh_hSto4tSjDOkzPEmvSHYDR6JV1pYE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "sales",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1_lGT0wWxx_nGNh_hSto4tSjDOkzPEmvSHYDR6JV1pYE/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "customerName",
              "displayName": "customerName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "customerEmail",
              "displayName": "customerEmail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "customerPhone",
              "displayName": "customerPhone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "items",
              "displayName": "items",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total",
              "displayName": "total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "orderDate",
              "displayName": "orderDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "formattedItems",
              "displayName": "formattedItems",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -224,
        0
      ],
      "id": "1869d5c2-11b4-40f6-841c-6a121ea9035d",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0VQtjIKsMzoSwxAt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const orderData = items[0].json;\n\n// Format the date and time\nconst orderDate = new Date(orderData.orderDate);\nconst formattedDate = `${('0' + orderDate.getDate()).slice(-2)}-${('0' + (orderDate.getMonth() + 1)).slice(-2)}-${orderDate.getFullYear()}`;\nconst formattedTime = orderData.orderDate;\n\n// A helper function to format time in HH:MM AM/PM format\nconst formatTime = (isoTime) => {\n  const date = new Date(isoTime);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  return hours + ':' + minutes + ' ' + ampm;\n};\n\n// Now create the HTML table string\nlet tableHtml = `\n    <table class=\"table-container\">\n        <thead>\n            <tr>\n                <th>Item</th>\n                <th>Quantity</th>\n                <th>Price</th>\n            </tr>\n        </thead>\n        <tbody>\n`;\n\n// Loop through the items and build a table row for each\nfor (const item of orderData.items) {\n    tableHtml += `\n        <tr>\n            <td>${item.name}</td>\n            <td>${item.quantity}</td>\n            <td>$${item.price}</td>\n        </tr>\n    `;\n}\n\n// Add the grand total row and close the table\ntableHtml += `\n            <tr style=\"font-weight: bold;\">\n                <td colspan=\"2\" style=\"padding: 10px; text-align: right;\">Grand Total</td>\n                <td>$${orderData.total}</td>\n            </tr>\n        </tbody>\n    </table>\n`;\n\n// Add the complete table HTML, formatted date, and formatted time to the JSON payload\norderData.htmlTable = tableHtml;\norderData.formattedDate = formattedDate;\norderData.formattedTime = formatTime(formattedTime);\n\nreturn [{ json: orderData }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        0
      ],
      "id": "f8292297-0c8a-4454-b398-288f70ead5d0",
      "name": "Code1"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.customerEmail }}",
        "subject": "The Donut Shop : Invoice ",
        "message": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Donut Shop Bill</title>\n    <style>\n        body {\n            font-family: 'Inter', sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f7f3f2;\n        }\n        .container {\n            max-width: 600px;\n            margin: 20px auto;\n            padding: 20px;\n            background-color: #ffffff;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n        .header {\n            text-align: center;\n            border-bottom: 2px solid #f97316;\n            padding-bottom: 10px;\n            margin-bottom: 20px;\n        }\n        .header h1 {\n            color: #f97316;\n            font-size: 28px;\n            margin: 0;\n        }\n        .content {\n            color: #4b5563;\n            line-height: 1.6;\n        }\n        .table-container {\n            margin: 20px 0;\n            border-collapse: collapse;\n            width: 100%;\n        }\n        .table-container th,\n        .table-container td {\n            padding: 12px;\n            border-bottom: 1px solid #e5e7eb;\n            text-align: left;\n        }\n        .table-container th {\n            background-color: #f3f4f6;\n            font-weight: 500;\n            color: #333;\n        }\n        .table-container .total-row {\n            background-color: #f97316;\n            color: #fff;\n            font-weight: bold;\n        }\n        .footer {\n            margin-top: 20px;\n            text-align: center;\n            font-size: 12px;\n            color: #9ca3af;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>The Donut Shop</h1>\n        </div>\n        <div class=\"content\">\n            <p>Hello {{ $json.customerName }},</p>\n            <p>Thank you for your recent purchase at The Donut Shop. Here is a summary of your bill dated <b>{{ $json.formattedDate }}</b>:</p>\n            \n           {{ $json.htmlTable }}\n            \n            <p>If you have any questions, please feel free to contact us. We look forward to seeing you again soon!</p>\n            <p>Best regards,<br>The Donut Shop Team</p>\n        </div>\n    </div>\n    <div class=\"footer\">\n        This email was sent by The Donut Shop.\n    </div>\n</body>\n</html>\n",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        192,
        0
      ],
      "id": "f49b4f89-06af-4aa7-af25-566e558231b5",
      "name": "Send a message",
      "webhookId": "bdbec498-497f-458b-9f34-3fcac37cde22",
      "credentials": {
        "gmailOAuth2": {
          "id": "BZvimZeoS7LAgdVg",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0ad736aa-4bee-4818-bb14-17689476f749",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ff496c419b6b3698d13a789904bc0781fbe0aec50054ad784893d28a4ce6537e"
  },
  "id": "RwlOtyMtSzRu4T7E",
  "tags": []
}